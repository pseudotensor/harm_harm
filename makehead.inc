###################
#
# see makefile.notes for detailed comments/notes
#
###################


########################
#
# PREPARE COMMAND NAMES
#
########################
PREP=prep
PREPLD=prepgrmhdldouble
PREPLIAISON=prepliaison
PREPJONINTERP=prepiinterp
PREPBIN2TXT=prepbin2txt
PREPSMCALC=prepsmcalc

########################
#
# BINARY NAMES
#
########################
DEFTARGET=
CMD=grmhd
CMD2=grmhdldouble
LIAISONCMD=liaison
JONINTERPCMD=iinterp
BIN2TXTCMD=bin2txt
SMCALCCMD=smcalc


# different target sets
MPITARGETS=$(DEFTARGET) $(CMD) $(CMD2) $(LIAISONCMD) $(PREP) $(PREPLD) $(PREPLAISON)
BINARYTARGETS=$(CMD) $(CMD2) $(LIAISONCMD)

########################
#
# Set default goal
#
########################
.DEFAULT_GOAL := $(CMD)

$(warning default goal is $(.DEFAULT_GOAL))
$(warning goal is $(MAKECMDGOALS))
$(warning MPITARGETS is $(MPITARGETS))

# check for default make call
ifeq ($(MAKECMDGOALS),)
MYMAKECMDGOALS=$(.DEFAULT_GOAL)
else
MYMAKECMDGOALS=$(MAKECMDGOALS)
endif

########################
#
# MPI CHOICE
#
########################

#ifeq ($(MYMAKECMDGOALS),$(filter $(MYMAKECMDGOALS), $(MPITARGETS)))
ifneq ($(filter $(MPITARGETS), $(MYMAKECMDGOALS)),)
# choice for below
# i.e. MPI is only for grmhd, grmhdldouble, and liaison codes
USEMPI=1

else

# no choice for below
# i.e. no MPI for iinterp, bin2txt, or smcalc
USEMPI=0

endif


########################
#
# OpenMP CHOICE
#
########################
USEOPENMP=1


$(warning USEMPI is $(USEMPI))
$(warning USEOPENMP is $(USEOPENMP))


# turns on -mp and -pc64 for USEICC?????=1
# Note that if using -pc64 -mp that error in inversion seems to be limited for doubles to 1E-11 instead of 1E-15
# causes code to be less accurate: e.g. inversion doesn't reach to 1E-15, but rather 1E-11
# for some simple linear wave tests with small amplitude can cause significant problems if any  noise exists in intial solution
# With OpenMP and icc 10.1 20080602 this feature with:
#      -O2 -finline -finline-functions -ip -fno-alias -unroll -Wall -Wcheck -Wshadow -w2 -wd=1419,869,177,310,593,810,981,1418 $(DFLAGS) -g
# caused the fluxcalc_fluxctstag_emf_1d() function fail to work properly.  It would cause NaN's to random appear in different places. I tried to find any associated bug, but could not.  Reverting to -O0 leads to no problems.
ENFORCEPRECISION=0


###################
# LAPACK
# can easily see if MKL already setup by doing:
# echo ${MKLROOT}
# in bash and see if defined
#
# otherwise must do "source" command below before compiling with lapack:
# on 64-bit emulated machines (most intel/amd machines):
# source /opt/intel/mkl/10.0.3.020/tools/environment/mklvarsem64t.sh
# For true 64-bit machines and 32-bit machines different source
# true 64-bit:
# source /opt/intel/mkl/10.0.3.020/tools/environment/mklvars64.sh
# true 32-bit:
# source /opt/intel/mkl/10.0.3.020/tools/environment/mklvars32.sh
# and recall the directory will be different on each machine
#
# on ki-rh39 and orange:
# source /u/ki/jmckinne/intel/mkl/10.0.5.025/tools/environment/mklvarsem64t.sh
#
# also see:
# http://www.netlib.org/eispack/
# http://www.netlib.org/lapack/double/dsyev.f
#
USELAPACK=1
#
####################


#END


