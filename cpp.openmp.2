
# 1 "mpidefs.h" 1





# 1 "supermpidefs.h" 1





double (*workbc)[3 * 2][((8>9) ? 8 : 9) * ((((4*((64>1) ? 1 : 0)>4*((64>1) ? 1 : 0)) ? 4*((64>1) ? 1 : 0) : 4*((64>1) ? 1 : 0))>4*((1>1) ? 1 : 0)) ? ((4*((64>1) ? 1 : 0)>4*((64>1) ? 1 : 0)) ? 4*((64>1) ? 1 : 0) : 4*((64>1) ? 1 : 0)) : 4*((1>1) ? 1 : 0)) * ((((((64 +4*((64>1) ? 1 : 0)*2)*(1 +4*((1>1) ? 1 : 0)*2)*((64>1) ? 1 : 0))>((64 +4*((64>1) ? 1 : 0)*2)*(1 +4*((1>1) ? 1 : 0)*2)*((64>1) ? 1 : 0))) ? ((64 +4*((64>1) ? 1 : 0)*2)*(1 +4*((1>1) ? 1 : 0)*2)*((64>1) ? 1 : 0)) : ((64 +4*((64>1) ? 1 : 0)*2)*(1 +4*((1>1) ? 1 : 0)*2)*((64>1) ? 1 : 0)))>((64 +4*((64>1) ? 1 : 0)*2)*(64 +4*((64>1) ? 1 : 0)*2)*((1>1) ? 1 : 0))) ? ((((64 +4*((64>1) ? 1 : 0)*2)*(1 +4*((1>1) ? 1 : 0)*2)*((64>1) ? 1 : 0))>((64 +4*((64>1) ? 1 : 0)*2)*(1 +4*((1>1) ? 1 : 0)*2)*((64>1) ? 1 : 0))) ? ((64 +4*((64>1) ? 1 : 0)*2)*(1 +4*((1>1) ? 1 : 0)*2)*((64>1) ? 1 : 0)) : ((64 +4*((64>1) ? 1 : 0)*2)*(1 +4*((1>1) ? 1 : 0)*2)*((64>1) ? 1 : 0))) : ((64 +4*((64>1) ? 1 : 0)*2)*(64 +4*((64>1) ? 1 : 0)*2)*((1>1) ? 1 : 0)))];
signed char (*workbc_int)[3 * 2][(1+0) * ((((4*((64>1) ? 1 : 0)>4*((64>1) ? 1 : 0)) ? 4*((64>1) ? 1 : 0) : 4*((64>1) ? 1 : 0))>4*((1>1) ? 1 : 0)) ? ((4*((64>1) ? 1 : 0)>4*((64>1) ? 1 : 0)) ? 4*((64>1) ? 1 : 0) : 4*((64>1) ? 1 : 0)) : 4*((1>1) ? 1 : 0)) * ((((((64 +4*((64>1) ? 1 : 0)*2)*(1 +4*((1>1) ? 1 : 0)*2)*((64>1) ? 1 : 0))>((64 +4*((64>1) ? 1 : 0)*2)*(1 +4*((1>1) ? 1 : 0)*2)*((64>1) ? 1 : 0))) ? ((64 +4*((64>1) ? 1 : 0)*2)*(1 +4*((1>1) ? 1 : 0)*2)*((64>1) ? 1 : 0)) : ((64 +4*((64>1) ? 1 : 0)*2)*(1 +4*((1>1) ? 1 : 0)*2)*((64>1) ? 1 : 0)))>((64 +4*((64>1) ? 1 : 0)*2)*(64 +4*((64>1) ? 1 : 0)*2)*((1>1) ? 1 : 0))) ? ((((64 +4*((64>1) ? 1 : 0)*2)*(1 +4*((1>1) ? 1 : 0)*2)*((64>1) ? 1 : 0))>((64 +4*((64>1) ? 1 : 0)*2)*(1 +4*((1>1) ? 1 : 0)*2)*((64>1) ? 1 : 0))) ? ((64 +4*((64>1) ? 1 : 0)*2)*(1 +4*((1>1) ? 1 : 0)*2)*((64>1) ? 1 : 0)) : ((64 +4*((64>1) ? 1 : 0)*2)*(1 +4*((1>1) ? 1 : 0)*2)*((64>1) ? 1 : 0))) : ((64 +4*((64>1) ? 1 : 0)*2)*(64 +4*((64>1) ? 1 : 0)*2)*((1>1) ? 1 : 0)))];
# 7 "mpidefs.h" 2




# 1 "mpidefs.mpi_grmhd_grray_liaison.h" 1
# 94 "mpidefs.mpi_grmhd_grray_liaison.h"
int *processtypelist_world;
int *processtypelist_grmhd;
int sizeproclist_world;
int sizeproclist_grmhd;
# 12 "mpidefs.h" 2




int romiocoliter;
int periodicx1, periodicx2, periodicx3;
int mpiperiodicx1, mpiperiodicx2, mpiperiodicx3;
int skipix1, reflectix1, reflectox1;
int skipix2, reflectix2, reflectox2;
int skipix3, reflectix3, reflectox3;
int intix1, intox1, intix2, intox2, intix3, intox3;
int skipintix1, skipintix2, skipintix3;
int ncpux1, ncpux2, ncpux3;
int truenumprocs;
int myid, myid_world, numprocs;
char myidtxt[200];
int totalzones, realtotalzones,realtotalcompzones;
int rtotalzones;
int itotalzones;
int sizes[3 + 1][10000];
int isizes[3 + 1][10000];
int totalsize[3 + 1];
int itotalsize[3 + 1];
int mycpupos[3 + 1];
int primgridpos[7][3*2][9];

double primfactor[7][3*2][2][1+2][9];
int dirgenset[7][3*2][7];
int dirloopset[7][3*2][2][18];
int srdir[3*2];

int startpos[3 + 1];
int endpos[3 + 1];

int *startpos0[3 +1];
int *endpos0[3 +1];
int *mycpupos0[3 +1];

int plmpiglobal;


int procnamelen;







double ndtsend, bsq_maxsend;


int nextbuf,numcolumns;
int bufferoffset;
int joniosize,writebufsize;
# 5 "defs.general.h" 2
# 20 "defs.general.h"
double Xmetricnew[4],Xmetricold[4];

double *lumvsr,*lumvsr_tot;

double *dissvsr[18],*dissvsr_tot[18];

double *rcent,*rcent_tot;

double *dVvsr,*dVvsr_tot,*vrsqvsr,*vrsqvsr_tot,*dMvsr,*dMvsr_tot,*dTrrvsr, *dTrrvsr_tot,*Mvsr_tot,*Mvsrface1_tot,*MOrvsr_tot,*phivsr_tot,*dJvsr,*dJvsr_tot,*Jvsr_tot,*Jvsrface1_tot;





double gam,gamideal;


int defcoord;
double Rin, R0, Rout, hslope, Zin, Zout;
double Rin_array[4], Rout_array[4];
double Risco,Rhor;
double cour;
double dV, dVF, dx[4], startx[4], endx[4], Diffx[4];
double dt,t,tf,tstepparti,tsteppartf;
double TDYNORYEglobal,Hglobal;
double rcurr, hcurr;
double drsing;
# 62 "defs.general.h"
double mydminarg1, mydminarg2;
long nstep;
int specialstep;

int steppart,numstepparts;

int gocont;
int runtype;


FILE *log_file;
FILE *fail_file;
FILE *logfull_file;
FILE *logdt_file;
FILE *logdtfull_file;
FILE *logstep_file;
FILE *logperf_file;
double DTstep,DTstepdot,DTperf,DTgocheck,DTtimecheck;
int reallaststep,onemorestep;


int PVER,GRIDVER,DVER,FLVER,NPVER,AVG1DVER,AVG2DVER,ENERVER,MODEVER,LOSSVER,SPVER,TSVER,LOGDTVER,STEPVER,PERFVER,ADVER,PDVER,CALCVER,FLINEVER;

int PTYPE,GRIDTYPE,DTYPE,FLTYPE,NPTYPE,AVG2DTYPE,AVG1DTYPE,ENERTYPE,LOSSTYPE,SPTYPE,TSTYPE,LOGDTTYPE,STEPTYPE,PERFTYPE,ADTYPE,PDTYPE,CALCTYPE,FLINETYPE,MODETYPE,EXPANDTYPE,NPCOMPUTETYPE;


double DTdumpgen[11];
long dumpcntgen[11];





long DTr;




long rdump_cnt;

int nstroke;



double t_transition_in,t_transition_out;
int global_enerregiondef[8][2][4];





int failed;
int lim[4],fluxmethod,FLUXB,UTOPRIMVERSION,TIMEORDER,DOENOFLUX,avgscheme[4];
int dofluxreconevolvepointfield,emffixedstencil,extrazones4emf,splitmaem,unewisavg;
int do_transverse_flux_integration[9],do_conserved_integration[9],do_source_integration[9];
int useghostplusactive;
double defcon;



double frdot[64][9];
double pdottermsjet2[3*2][(7)][9];
double failfloorcountlocal[4][9];
double failfloorcountlocal_tot[4][9];


int dothisenerreg[8];
int dofluxreg[8][3*2];
int enerposreg[8][3*2];



double fladdreg[8][9];
double fladdreg_tot[8][9];
double fladdtermsreg[8][9][9];
double fladdtermsreg_tot[8][9][9];
double Ureg_init[8][9];
double Ureg_init_tot[8][9];
double pcumreg[8][3*2][9];
double pcumreg_tot[8][3*2][9];
double pdotreg[8][3*2][9];
double pdottermsreg[8][3*2][(7)][9];
double sourceaddreg[8][9];
double sourceaddreg_tot[8][9];
double sourceaddtermsreg[8][3][9];
double sourceaddtermsreg_tot[8][3][9];
double dissreg[8][18];
double dissreg_tot[8][18];







double pdotreg_tot[8][3*2][9];
double pdottermsreg_tot[8][3*2][(7)][9];




int *doflux;
int *enerpos;
double *fladd;
double *fladd_tot;
double (*fladdterms)[9];
double (*fladdterms_tot)[9];
double *U_init;
double *U_init_tot;
double (*pcum)[9];
double (*pcum_tot)[9];
double (*pdot)[9];
double (*pdotterms)[(7)][9];
double *sourceadd;
double *sourceadd_tot;
double (*sourceaddterms)[9];
double (*sourceaddterms_tot)[9];
double *diss;
double *diss_tot;


double (*pdot_tot)[9];
double (*pdotterms_tot)[(7)][9];





int icurr, jcurr, kcurr, pcurr, ihere, jhere, phere;


int horizoni,horizoncpupos1;
long realnstep;
int partialstep;
int mpicombine;
int mpicombinetype;
int truempicombinetype;
int halftimep;
int whichrestart;
int appendold;
int whocalleducon;

long restartsteps[2];
int binaryoutput,sortedoutput;
int CHECKCONT,DOTSTEPDIAG,DOLOGSTEP,DOLOGPERF;
int NDTCCHECK,NZCCHECK,NDTDOTCCHECK,NGOCHECK,NTIMECHECK;
double PERFWALLTIME,ZCPSESTIMATE;

long steptofaildump,steptofailmap;
int ifail,jfail,kfail,dofailmap,dofaildump,restartonfail;

double h_over_r;

double h_over_r_jet;
int BCtype[3*2];
int rescaletype;
int cooling;
int DOENERDIAG,DOGDUMPDIAG,DORDUMPDIAG,DODUMPDIAG,DOAVGDIAG, DOIMAGEDIAG,DOAREAMAPDIAG;
int GAMMIEDUMP,GAMMIEIMAGE,GAMMIEENER,DODIAGS,RESTARTMODE,WHICHFILE,POSDEFMETRIC,DOENODEBUGEVERYSUBSTEP,DODIAGEVERYSUBSTEP;
int INVERTFROMAVERAGEIFFAILED,LIMIT_AC_PRIM_FRAC_CHANGE,LIMIT_AC_FRAC_CHANGE;
int PARAMODWENO;
double MAX_AC_FRAC_CHANGE,MAX_AC_PRIM_FRAC_CHANGE;
double RHOMIN,UUMIN,RHOMINLIMIT,UUMINLIMIT;
double prMAX[9];
double prfloorcoef[9];
double BSQORHOLIMIT,BSQOULIMIT,UORHOLIMIT,GAMMAMAX,GAMMADAMP,GAMMAFAIL;
double SAFE;
int debugfail;
double uttdiscr;
int jonchecks;
int dnumcolumns[16];
struct blink * blinkptr0[16];
struct blink * cpulinkptr0[16];
int DOCOLSPLIT[16];
int docolsplit;
int nextcol;
int doevolvemetricsubsteps, gravityskipstep;
double gravitydtglobal, sourcedtglobal, wavedtglobal;
int waveglobaldti[4],waveglobaldtj[4],waveglobaldtk[4];
int didstorepositiondata,didstoremetricdata;


double msun,lsun,rsun,G,H,C,qe,Na,malpha,mn,me,kb,arad,sigmasb,sigmamat,mevocsq,ergPmev,mp,Q,R,Re,hpl,hbar,K,K2;
double a,MBH,QBH;
double Mfactor,Jfactor,rhofactor;
double dabh,dE,dJ,dEold,dJold;
double mb,mbcsq,mbwithrhounit,amu,a0,MBH0,QBH0,Mdot,Mdotc,Mcgs,Ccode;
double Lunit,Tunit,Vunit,rhounit,rhomassunit,Munit,mdotunit,energyunit,edotunit,Pressureunit,Tempunit,Bunit,massunitPmsun;
int rho0unittype;
double ledd,leddcode;

int NUMBUFFERS;

int advancepassnumber;




int nprstart,nprend;
int plglobal;
int nprlist[9];


int npr2interpstart,npr2interpend;
int pl2global;
int npr2interplist[9];


int npr2notinterpstart,npr2notinterpend;
int pl3global;
int npr2notinterplist[9];


int nprboundstart,nprboundend;
int pl4global;
int nprboundlist[9];


int nprfluxboundstart,nprfluxboundend;
int pl5global;
int nprfluxboundlist[9];


int nprdumpstart,nprdumpend;
int pl6global;
int nprdumplist[9];


int nprinvertstart,nprinvertend;
int pl7global;
int nprinvertlist[9];


int fluxloop[4][10];
int emffluxloop[4][10];
int Uconsloop[10];
int emfUconsloop[10];
int Uconsevolveloop[10];
int a_interporder[(1 + 20 + 4)];
int *interporder;



int dirglobal,locglobal,iglobal,jglobal,kglobal,iterglobal,interporfluxglobal;


int special3dspc;

int numbercpu[ 3+1 ];

double globalinv[13];
char globalinvtext[13][10];


double nu,ss,ucrit,Ttpow,jetalpha;

int lntries;
double lerrx;


double (*ptr_pressure_rho0_u)(double rho0, double u);
double (*ptr_compute_u_from_entropy)(double rho0, double entropy);
double (*ptr_u_rho0_p)(double rho0, double p);
double (*ptr_dpdu_rho0_u)(double rho0, double u);
double (*ptr_dpdrho0_rho0_u)(double rho0, double u);
double (*ptr_cs2_compute)(double rho0, double u);
double (*ptr_compute_dSdrho)(double rho0, double u);
double (*ptr_compute_dSdu)(double rho0, double u);
double (*ptr_compute_entropy)(double rho0, double u);
double (*ptr_pressure_wmrho0) (double rho0, double wmrho0);
double (*ptr_compute_idwmrho0dp) (double rho0, double wmrho0);
double (*ptr_compute_idrho0dp) (double rho0, double wmrho0);
double (*ptr_compute_qdot) (double rho0, double u);
int (*ptr_compute_sources_EOS) (double *pr, struct of_compgeom *geom, struct of_state *q, double *Ui, double *dUother, double(*dUcomp)[9]);
void (*ptr_compute_allextras) (int justnum, double rho0, double u, int *numextrasreturn, double *extras);
int (*ptr_get_extrasprocessed) (int doall, int i, int j, int k, double *pr, double *extras, double *processed);
double (*ptr_compute_temp) (double rho0, double u);
void (*ptr_compute_EOS_parms) (double (*prim)[(64 +4*((64>1) ? 1 : 0)*2)][(64 +4*((64>1) ? 1 : 0)*2)][9]);
void (*ptr_store_EOS_parms) (int i, int j, int k, int numparms, double *parlist);
void (*ptr_get_EOS_parms) (int i, int j, int k, int*numparms, double *parlist);

double SQRTMINNUMREPRESENT;



int AVOIDADVANCESHIFTX1DN,AVOIDADVANCESHIFTX1UP,AVOIDADVANCESHIFTX2DN,AVOIDADVANCESHIFTX2UP,AVOIDADVANCESHIFTX3DN,AVOIDADVANCESHIFTX3UP,GLOBALBCMOVEDWITHACTIVESECTION;


# 1 "defs.user.h" 1


struct Ccoordparams coordparams;
# 351 "defs.general.h" 2



int crapdebug;




int ENDOPENMPSHAREDLIST;
# 4 "defs.h" 2
# 3 "main.c" 2


int main(int argc, char *argv[])
{

  static double comptstart;






  crapdebug=0;




  if (init(&argc,&argv) >= 1) {
    dualfprintf(fail_file, "main:init: failure\n");
    myexit(1);
  }



  if (DODIAGS) {
    trifprintf("proc: %04d : Start initial diagnostics\n", myid);

    diag(0,t,nstep,realnstep);
    trifprintf("proc: %04d : End initial diagnostics\n", myid);
  }






  if((myid<=0)&&(appendold==0)){
    if(DOLOGSTEP){
      myfprintf(logstep_file,"#%10s\n%10d %10d\n#","STEPVER",STEPVER,STEPTYPE);
    }
    if(DOLOGPERF){
      myfprintf(logperf_file,"#%10s\n%10d %10d\n#","PERFVER",PERFVER,PERFTYPE);
    }
  }


  trifprintf("proc: %04d : Start computation\n", myid);




  comptstart=0;


  timecheck(0,comptstart);


  onemorestep=reallaststep=0;
  while (reallaststep==0) {


    nstroke = 0;






    step_ch_full(a_s_pglobal,a_s_pstagglobal,a_s_unewglobal,a_s_vpotarrayglobal,a_s_Bhatglobal,a_s_gp_l,a_s_gp_r,a_s_F1,a_s_F2,a_s_F3,a_s_emf,a_s_ulastglobal);


    mpiisum0(&nstroke,0);






    nstep++;






    if (DODIAGS && !DODIAGEVERYSUBSTEP){
      a_s_pdump = a_s_pglobal;
      diag(1,t,nstep,realnstep);

      trifprintf( "D");

    }



    timecheck(1,comptstart);


    timecheck(2,comptstart);



    output_steptimedt_info(comptstart);


  }
  trifprintf("proc: %04d : End computation\n", myid);



  timecheck(3,comptstart);



  if (DODIAGS){
    a_s_pdump = a_s_pglobal;
    diag(2,t,nstep,realnstep);
  }


  gocheck(3);


  timecheck(4,comptstart);


  myexit(0);
  return (0);
}






int gocheck(int whichlocation)
{
  static int goend=0;

  char stemp[200];
  char goch;
  FILE *gogo_file,*gocont_file;



  if(whichlocation==0){

    if(myid<=0){
      if(CHECKCONT){

 sprintf(stemp,"%sgo.cont","");

 if((gocont_file=fopen(stemp,"rt"))==((void *)0)){
   dualfprintf(fail_file,"WARNING: Could not open go.cont file: %s , assume user doesn't want to use it\n",stemp);

   goch='z';
 }
 else goch='a';
      }
    }





    if(goch=='z'){


    }
    else{
      if(CHECKCONT){
 if(myid<=0){
   goch=fgetc(gocont_file);
   if( (goch=='y')||(goch=='Y')){
     gocont=1;
     trifprintf("#go.cont called\n");

     fscanf(gocont_file,"%d",&runtype);
   }
   fclose(gocont_file);
 }


 if(numprocs>1){




 }
      }

    }
  }
  else if(whichlocation==1){

    if(myid==0){

      if(!(nstep%NGOCHECK)){
 sprintf(stemp,"%sgo.go","");

 if((gogo_file=fopen(stemp,"rt"))==((void *)0)){



 }
 else{
   goch=fgetc(gogo_file);
   if( (goch=='n')||(goch=='N')){
     goend=1;
     trifprintf("#go.go called\n");
   }
   fclose(gogo_file);


 }
      }

    }




    trifprintf("#proc: %s go.go called\n",myidtxt);
    if(goend==1) reallaststep=1;

  }
  else if(whichlocation==3){
    if(goend==1) trifprintf("proc: %s Go end called(go.go)\n",myidtxt) ;
  }




  return(0);

}
